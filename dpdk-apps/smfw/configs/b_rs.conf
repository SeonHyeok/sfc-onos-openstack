# Note that config file parsing is not tested against invalid
# or missing configurations because and is missing lots of error handling,
# so double check yout configuration file if something goes wrong.

# mempool_size = 2^log_mempool_size -1
log_mempool_size = 13;


# Number of Cores used by the application
cores = 1;

# Bitmask of ports which should be used.
port_mask = 0x03;

# cores on which the receiver receive.
receive_on_cores = [0, 0]

bench_senders:
(
    {
        core_id = 0;

        sender_id = 0;

        dst_mac = "02:00:00:00:00:01";
        src_ip = "10.1.0.3";
        dst_ip = "10.1.0.8";
        dst_udp_port = 666;

        # packet_size > IP + UDP + 16 (in byte)
        sequence = (
            {
                packet_per_sec = 100000;
                packet_nb = 1000000;
                packet_size = 100;
            },{
                packet_per_sec = 200000;
                packet_nb = 1000000;
                packet_size = 100;
            },{
                packet_per_sec = 300000;
                packet_nb = 1000000;
                packet_size = 100;
            },{
                packet_per_sec = 400000;
                packet_nb = 1000000;
                packet_size = 100;
            },{
                packet_per_sec = 500000;
                packet_nb = 1000000;
                packet_size = 100;
            },{
                packet_per_sec = 600000;
                packet_nb = 1000000;
                packet_size = 100;
            },{
                packet_per_sec = 700000;
                packet_nb = 1000000;
                packet_size = 100;
            }
        );
    },{
        core_id = 0;

        # Port where the packets should be send from:
        sender_id = 1;

        dst_mac = "02:00:00:00:00:FF";

        src_ip = "10.3.0.3";
        dst_ip = "10.3.0.8";

        dst_udp_port = 666;

        # packet_size > IP + UDP + 8 (in byte)
        sequence = (
            {
                packet_per_sec = 2;
                packet_nb = 0xFFFFFFFF;
                packet_size = 100;
            }
        )
    }

);

bench_receivers:
(
    {
        # Network Port where the packets should be send from:
        receiver_id = 1;

        # UDP Port where the packets should be send from:
        dst_udp_port = 666;

        # Log file
        sequence_log_name = [
            "10m_100kHz_100byte.csv",
            "10m_200kHz_100byte.csv",
            "10m_300kHz_100byte.csv",
            "10m_400kHz_100byte.csv",
            "10m_500kHz_100byte.csv",
            "10m_600kHz_100byte.csv",
            "10m_700kHz_100byte.csv"
            "10m_800kHz_100byte.csv"
            "10m_900kHz_100byte.csv"
            "10m_1000kHz_100byte.csv"
            "10m_1100kHz_100byte.csv"
            "10m_1200kHz_100byte.csv"
        ];
    }
);

arp_senders:
(
    {
        # if no packet was send in last timeout seconds. send arp packets at first.
        timeout = 15
        sender_id = 0
        dst_mac = "FF:FF:FF:FF:FF:FF"
        src_ip = "10.1.0.3"
        dst_ip = "10.1.0.255"
    },
    {
        # if no packet was send in last timeout seconds. send arp packets at first.
        timeout = 15
        sender_id = 1
        dst_mac = "FF:FF:FF:FF:FF:FF"
        src_ip = "10.1.0.8"
        dst_ip = "10.1.0.255"
    }
)
